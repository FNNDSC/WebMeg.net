/**
 * Initialize dropzone or manual selection.
 */
function initialize_dragndrop() {

	// drag enter and drag leave
	MEGFIFF = [];
	MEGFIFF.coordX=0;
	MEGFIFF.coordY=0;

	var dropZone = document.getElementById('drop_zone');
	dropZone.addEventListener('dragover', handleDragOver, false);
	dropZone.addEventListener('drop', on_drop, false);
	dropZone.addEventListener('dragleave', on_drag_leave, false);
	dropZone.addEventListener('dragenter', on_drag_enter, false);
	
	var nondropZone = document.getElementById('nondrop_zone');
	nondropZone.addEventListener('dragover', handleNonDrop, false);
	
	// Select file manually
	document.getElementById('fileSelector').addEventListener('change', handleFileSelection, false);
	
	// Select event file
	document.getElementById('eventSelector').addEventListener('change', loadEvents, false); 
	//on mousescroller
	document.body.addEventListener("mousewheel", mousescroll, false);
	
	document.onmousemove=function(e) {
		   var e=e||window.event;
		   MEGFIFF.coordX=e.pageX||e.clientX+document.body.scrollLeft;
		}
};

/**
 * Callback whenever a file is moved into the div
 */ 
function handleDragOver(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	this.style.opacity='0.8';
	evt.dataTransfer.dropEffect = 'copy';
}

/**
 * Callback whenever a file is moved into the div
 */ 
function on_drag_enter(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	$('#drop_zone').css('opacity',0.8);
}

function handleNonDrop(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	evt.dataTransfer.dropEffect = 'none';
}
/**
 * Callback whenever a file is moved out of the div
 */
function on_drag_leave(evt) {
	  // avoid further processing by the browser
	  evt.stopPropagation();
	  evt.preventDefault();
	  $('#drop_zone').css('opacity',0.4)
};

/**
 * Callback whenever a file is released on the div
 */
function on_drop(evt) {
	// avoid further processing by the browser
	evt.stopPropagation();
	evt.preventDefault();

	// grab the file list
	var _filelist = evt.dataTransfer.files;  

	// Return if user dragged more than one file 
	if (_filelist.length != 1) {
		alert('Drag only one file please');
		return;
	}

	load_files(_filelist);
};

function mousescroll(event) {
	if (event.wheelDelta < 0) {
		moveLeft();
	}
	else {
		moveRight();
	}
}

function handleFileSelection(evt) {    
    var files = evt.target.files; // The files selected by the user (as a FileList object).
    load_files(files);
  } // handleFileSelection

function loadEvents(evt) {    
	var files = evt.target.files;
    var file = files[0];           
    var reader = new FileReader();
    reader.onload = function() {
      event = addLoadEvents(this.result);            
    }
    reader.readAsText(file)
  } // handleFileSelection

window.onkeydown = function(e) {
    if (e.keyCode == 40) { // Down key
    	if (MEGFIFF.plotType == 'raster') {
        	MEGFIFF.scale = 1 / 2;
        	MEGFIFF.finalScale = MEGFIFF.finalScale * MEGFIFF.scale;
        	MEG_data = slice2d(finalData,MEGFIFF.numChannels);
    		MEG_data = displayOperations();
    	}
    	else {
    		if (MEGFIFF.minRaster == undefined) defineButter();
    		var temp = Math.abs((MEGFIFF.minRaster < MEGFIFF.maxRaster)?MEGFIFF.minRaster:MEGFIFF.maxRaster);
    		MEGFIFF.minRaster = MEGFIFF.minRaster - 0.2 * temp;
    		MEGFIFF.maxRaster = MEGFIFF.maxRaster + 0.2 * temp;
    	}
    	redraw();
    }
    
    if (e.keyCode == 38) { // Up key
    	if (MEGFIFF.plotType == 'raster') {
    		MEGFIFF.scale = 2;
        	MEGFIFF.finalScale = MEGFIFF.finalScale * MEGFIFF.scale;
        	MEG_data = slice2d(finalData,MEGFIFF.numChannels);
    		MEG_data = displayOperations();
    	}
    	else {
    		if (MEGFIFF.minRaster == undefined) defineButter();
    		var temp = Math.abs((MEGFIFF.minRaster < MEGFIFF.maxRaster)?MEGFIFF.minRaster:MEGFIFF.maxRaster);
    		MEGFIFF.minRaster = MEGFIFF.minRaster + 0.2 * temp;
    		MEGFIFF.maxRaster = MEGFIFF.maxRaster - 0.2 * temp;
    	}
    	redraw();
    }
    
    if (e.keyCode == 46) { // Delete key
        if(isEmpty(MEGFIFF.userSelection)) {
        	alert('No Channels selected to delete');
        }
        else {
        	for (var i = 0;i < MEGFIFF.userSelection.length;i++) {
        		MEGFIFF.visible[MEGFIFF.userSelection[i]] = false;
        		MEGFIFF.badChannels[MEGFIFF.userSelection[i]] = 1;
        	}
        	MEGFIFF.userSelection=[];
        	chart.destroy();
        	plotData_highChart(MEG_data);
			chart.xAxis[0].setExtremes(MEGFIFF.startPlot,MEGFIFF.endPlot);
        }
    }
    
    if (e.keyCode == 39) moveRight();
    
    if (e.keyCode == 37) moveLeft();
    
    if (e.which == 82 && e.ctrlKey) { // Press Crtl + r for adding Event type
    	e.preventDefault();
    	addEventGroup(e);
    }
    
    if (e.which == 69 && e.ctrlKey) { // Press Crtl + e for adding Event
    	e.preventDefault();
    	addEvent();
    }
    
    if (e.which == 68 && e.ctrlKey) { // Press Ctrl + d for deleting Event
    	e.preventDefault();
    	deleteEvent();
    }
    
    if (e.which == 70 && e.ctrlKey) { // Press Ctrl + f for deleting event group currently selected
    	e.preventDefault();
    	deleteEventGroup();
    }
    
    if (e.which == 66 && e.ctrlKey) { // Press Ctrl + b for superimposing data
    	e.preventDefault();
    	butterflyPlot();
    	extremesPlot();
    }
    
    if (e.which == 67 && e.ctrlKey) { // Press Ctrl + c for time series data
    	seriesPlot();
    }
    
    if (e.which == 107) { // Press Ctrl + c for time series data
    	chart.destroy();
    	MEGFIFF.numChannels++;
		MEG_data=slice2d(finalData,MEGFIFF.numChannels);
		MEGFIFF.goodChannels.push(1);
		MEGFIFF.chNames.push(MEGFIFF.allChs[MEGFIFF.numChannels-1]);
		MEGFIFF.colors.push("#1E90FF");
		MEG_data = displayOperations();
		plotData_highChart(MEG_data);
    	extremesPlot();		
    }
    
    if (e.which == 109) { // Press Ctrl + c for time series data
    	chart.destroy();
    	MEGFIFF.numChannels--;
		MEG_data=slice2d(finalData,MEGFIFF.numChannels);
		MEGFIFF.goodChannels.pop();
		MEGFIFF.chNames.pop();
		MEGFIFF.colors.pop();
		MEG_data = displayOperations();
		plotData_highChart(MEG_data);
    	extremesPlot();		
    }
}

// Resize the window
window.onresize = function(e) {
	try {
		MEGFIFF.width = this.window.innerWidth * 1;
		MEGFIFF.height = this.window.innerHeight * 0.9;
		chart.destroy();
		plotData_highChart(MEG_data1);
	}
	catch(err) {};
}

function checkData() {
	// Check if the any data is loaded
	try {
		MEGFIFF;
	}
	catch (err) {
		alert('Please load the file first');
		return 0;
	}
}

function moveLeft(){
	var disLen = chart.xAxis[0].getExtremes().max-chart.xAxis[0].getExtremes().min;
	if (MEGFIFF.startPlot - disLen > 0) {
		MEGFIFF.startPlot = MEGFIFF.startPlot - disLen; 
		MEGFIFF.endPlot = MEGFIFF.endPlot - disLen;
	}
	else {
		MEGFIFF.endPlot = disLen;
		MEGFIFF.startPlotTime = 0;
	}
	if (MEGFIFF.plotType == 'raster') extremesPlot()
	else {
		butterflyPlot();
	}
}

function moveRight(){
	var disLen = chart.xAxis[0].getExtremes().max-chart.xAxis[0].getExtremes().min;
	if (MEGFIFF.endPlot + disLen < chart.xAxis[0].getExtremes().dataMax) {
		MEGFIFF.startPlot = MEGFIFF.startPlot + disLen; 
		MEGFIFF.endPlot = MEGFIFF.endPlot + disLen;
	}
	else {
		MEGFIFF.endPlot = chart.xAxis[0].getExtremes().dataMax;
		MEGFIFF.startPlot = MEGFIFF.endPlot - disLen;
	}
	if (MEGFIFF.plotType == 'raster') extremesPlot()
	else {
		butterflyPlot();
	}
}


